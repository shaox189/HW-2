# -*- coding: utf-8 -*-
"""HW 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kXvHYJ2FudAHLb-JnFRbgb1QXk-udRHD
"""

# CRR method
import numpy as np


# Basic functions
def u(T, sigma, N):
  u = np.exp(sigma * np.sqrt(T/N))
  return u
def p(T, r, sigma, N, q):
  p = (np.exp((r-q) * T/N) - 1/u(T, sigma, N))/(u(T, sigma, N) - 1/u(T, sigma, N))
  return p 

# end node stock prices binomial trees 
def end_stock_price(S, T, sigma, N):
  stock_price = np.zeros(N+1)
  stock_price[0:N+1] = S * u(T, sigma, N)**np.arange(N+1) * (1/u(T, sigma, N))**np.arange(N,-1,-1)
  return stock_price

# European call/put option
def euro_call_put_option(T, r, sigma, N, q, i):
  for j in range(0,i+1):
    tree[i,j] = np.exp(-r * T/N) * (p(T, r, sigma, N, q) * tree[i+1,j+1] + (1-p(T, r, sigma, N, q)) * tree[i+1,j]) 

# option price
def option_price(S, K, T, r, sigma, N, q):
  global tree
  tree = np.zeros((N+1,N+1))
  if call_or_put == 0:
    tree[N,:] = np.maximum(end_stock_price(S, T, sigma, N)[:] - K, 0)      
    for i in range(N-1,-1,-1):
      if Euro_or_Amer == 0:   
        euro_call_put_option(T,r,sigma,N,q, i)         
      else:
        # American call option
        euro_call_put_option(T,r,sigma,N,q, i)
        tree[i,0:i+1] = np.maximum(tree[i,0:i+1], S * u(T, sigma, N)**np.arange(i+1) * (1/u(T, sigma, N))**np.arange(i,-1,-1) - K)
 
  else:
    tree[N,:] = np.maximum(- end_stock_price(S, T, sigma, N)[:] + K, 0)
    for i in range(N-1,-1,-1):
      if Euro_or_Amer == 0:
        euro_call_put_option(T,r,sigma,N,q, i)
      else:
        # American put option
        euro_call_put_option(T,r,sigma,N,q, i)
        tree[i,0:i+1] = np.maximum(tree[i,0:i+1], - S * u(T, sigma, N)**np.arange(i+1) * (1/u(T, sigma, N))**np.arange(i,-1,-1) + K)

  return tree[0,0]


# calculate the Greeks

def Greeks(S, K, T, r, sigma, N, q, ds, dr):
  delta = (tree[1,1] - tree[1,0])/(S * u(T, sigma, N) - S/u(T, sigma, N))
  gamma = (((tree[2,2] - tree[2,1])/(S * u(T, sigma, N)**2 - S)) - ((tree[2,1] - tree[2,0])/(S  - S / u(T, sigma, N)**2))) / (0.5 * (S * u(T, sigma, N)**2 - S / u(T, sigma, N)**2))
  vega = (option_price(S, K, T, r, sigma+ds, N, q) - option_price(S, K, T, r, sigma-ds, N, q))/(2 * ds) 
  theta = (tree[2,1] - tree[0,0])/(2 * T/N)
  rho = (option_price(S, K, T, r+dr, sigma, N, q) - option_price(S, K, T, r-dr, sigma, N, q))/(2 * dr) 

  print("delta is", delta)
  print("gamma is", gamma)
  print("vega is", vega)
  print("theta is", theta)
  print("rho is ", rho)



# selection of parameters
size  = 3
S     = 88 
K     = 66 
T     = 0.5 
r     = 0.15 
sigma = 0.4 
N     = 25 
q     = 0 
ds    = 0.0001
dr    = 0.0002

# Selection of American/European Put/Call Option
# this is European call option
Euro_or_Amer = 0  #European=0  Amercan=1
call_or_put  = 0  #call=0      put=1 

print("The option price is", option_price(S, K, T, r, sigma, N, q))
Greeks(S, K, T, r, sigma, N, q, ds, dr)